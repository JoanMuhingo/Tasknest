{"ast":null,"code":"var _jsxFileName = \"/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx\",\n  _s = $RefreshSig$();\n// TaskManager.jsx\nimport React, { useState, useEffect } from \"react\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskManager({\n  selectedTitleId,\n  setTaskLists\n}) {\n  _s();\n  const [editTask, setEditTask] = useState(null);\n  const [selectedList, setSelectedList] = useState(null);\n\n  // Fetch tasks for the selected title\n  useEffect(() => {\n    console.log(\"Current selectedTitleId in TaskManager:\", selectedTitleId);\n    const fetchTasks = async () => {\n      if (!selectedTitleId) return; // If no title selected, do nothing\n      try {\n        const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}`);\n        setSelectedList(response.data); // This should include tasks\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, [selectedTitleId]);\n  const addTask = async description => {\n    try {\n      const response = await axios.post(`http://localhost:5000/titles/${selectedTitleId}/tasks`, {\n        description\n      });\n      console.log(\"Full Response Data:\", response.data); // Detailed logging\n\n      // Extract the new task from the response\n      const newTask = response.data.task;\n      if (newTask) {\n        console.log(\"New Task Added:\", newTask); // Verify newTask content\n\n        // Update the taskLists in the state\n        setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n          ...list,\n          tasks: [...list.tasks, newTask]\n        } : list));\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // ... Other functions: updateTask, toggleTask, deleteTask ...\n\n  if (!selectedList) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Select a title to manage tasks.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      children: selectedList ? selectedList.title : \"Title not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), !editTask && selectedList && /*#__PURE__*/_jsxDEV(TaskForm, {\n      selectedTitleId: selectedTitleId,\n      onAddTask: description => addTask(description)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), editTask && /*#__PURE__*/_jsxDEV(EditTaskForm, {\n      task: editTask,\n      onSave: updateTask,\n      onCancel: () => setEditTask(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: selectedList ? selectedList.tasks : [],\n      onEdit: setEditTask,\n      onDelete: deleteTask,\n      onToggle: toggleTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskManager, \"M/cvuHPLIBgQ76gQ/ktJ5IIMDTM=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","TaskList","TaskForm","EditTaskForm","axios","jsxDEV","_jsxDEV","TaskManager","selectedTitleId","setTaskLists","_s","editTask","setEditTask","selectedList","setSelectedList","console","log","fetchTasks","response","get","data","error","addTask","description","post","newTask","task","prevLists","map","list","id","tasks","children","fileName","_jsxFileName","lineNumber","columnNumber","style","cursor","title","onAddTask","onSave","updateTask","onCancel","onEdit","onDelete","deleteTask","onToggle","toggleTask","_c","$RefreshReg$"],"sources":["/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx"],"sourcesContent":["// TaskManager.jsx\nimport React, { useState, useEffect } from \"react\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport axios from \"axios\";\n\nfunction TaskManager({ selectedTitleId, setTaskLists }) {\n  const [editTask, setEditTask] = useState(null);\n  const [selectedList, setSelectedList] = useState(null);\n\n  // Fetch tasks for the selected title\n  useEffect(() => {\n    console.log(\"Current selectedTitleId in TaskManager:\", selectedTitleId);\n    const fetchTasks = async () => {\n      if (!selectedTitleId) return; // If no title selected, do nothing\n      try {\n        const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}`);\n        setSelectedList(response.data); // This should include tasks\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, [selectedTitleId]);\n  \n  const addTask = async (description) => {\n    try {\n        const response = await axios.post(\n            `http://localhost:5000/titles/${selectedTitleId}/tasks`,\n            { description }\n        );\n\n        console.log(\"Full Response Data:\", response.data); // Detailed logging\n\n        // Extract the new task from the response\n        const newTask = response.data.task;\n\n        if (newTask) {\n            console.log(\"New Task Added:\", newTask); // Verify newTask content\n\n            // Update the taskLists in the state\n            setTaskLists((prevLists) =>\n                prevLists.map((list) =>\n                    list.id === selectedTitleId\n                        ? { ...list, tasks: [...list.tasks, newTask] }\n                        : list\n                )\n            );\n        } else {\n            console.error(\"Invalid response structure:\", response.data);\n        }\n\n    } catch(error) {\n        console.error(\"Error adding task:\", error);\n    }\n  };\n  \n  // ... Other functions: updateTask, toggleTask, deleteTask ...\n\n  if (!selectedList) return <div>Select a title to manage tasks.</div>;\n\n  return (\n    <div>\n      <h3 style={{ cursor: \"pointer\" }}>\n        {selectedList ? selectedList.title : \"Title not found\"}\n      </h3>\n\n      {!editTask && selectedList && (\n        <TaskForm \n          selectedTitleId={selectedTitleId}\n          onAddTask={(description) => addTask(description)}\n        />\n      )}\n\n      {editTask && (\n        <EditTaskForm\n          task={editTask}\n          onSave={updateTask}\n          onCancel={() => setEditTask(null)}\n        />\n      )}\n\n      <TaskList\n        tasks={selectedList ? selectedList.tasks : []}\n        onEdit={setEditTask}\n        onDelete={deleteTask}\n        onToggle={toggleTask}\n      />\n    </div>\n  );\n}\n\nexport default TaskManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}