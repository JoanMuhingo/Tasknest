{"ast":null,"code":"var _jsxFileName = \"/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx\",\n  _s = $RefreshSig$();\n// TaskManager.jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskManager = ({\n  selectedTitleId,\n  taskLists,\n  setTaskLists\n}) => {\n  _s();\n  const [editTask, setEditTask] = useState(null);\n  const [selectedList, setSelectedList] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks for the selected title\n  useEffect(() => {\n    const fetchTasks = async () => {\n      if (!selectedTitleId) return; // If no title selected, do nothing\n      try {\n        const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}/tasks`);\n        setSelectedList(response.data); // This should include tasks\n        console.log(\"Fetched Tasks:\", response.data); // Debugging line\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, [selectedTitleId]);\n\n  // Function to add a new task\n  const addTask = async (description, due_date, priority) => {\n    if (!selectedTitleId) {\n      console.error(\"No title selected!\");\n      return; // Exit the function if no title is selected\n    }\n    try {\n      const response = await axios.post(`http://localhost:5000/titles/${selectedTitleId}/tasks`, {\n        description,\n        due_date,\n        priority\n      });\n      if (response.data && response.data.task) {\n        const newTask = response.data.task;\n        console.log(\"New Task Added:\", newTask); // Debugging line\n\n        setSelectedList(prevList => ({\n          ...prevList,\n          tasks: [...prevList.tasks, newTask] // Update the task list\n        }));\n        setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n          ...list,\n          tasks: [...list.tasks, newTask]\n        } : list));\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Function to update a task\n  const updateTask = async updatedTask => {\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${updatedTask.id}`, {\n        description: updatedTask.description,\n        due_date: updatedTask.due_date,\n        priority: updatedTask.priority,\n        completed: updatedTask.completed\n      });\n\n      // Update the task in the local state\n      setSelectedList(prevList => ({\n        ...prevList,\n        tasks: prevList.tasks.map(task => task.id === updatedTask.id ? response.data.task : task)\n      }));\n      setEditTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Function to toggle task completion\n  const toggleTask = async id => {\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${id}/toggle`);\n      if (response.data && response.data.task) {\n        const updatedTask = response.data.task;\n        console.log(\"Task Toggled:\", updatedTask); // Debugging line\n\n        // Update the task in the selectedList\n        setSelectedList(prevList => ({\n          ...prevList,\n          tasks: prevList.tasks ? prevList.tasks.map(task => task.id === id ? updatedTask : task) : [] // Fallback to an empty array if tasks is undefined\n        }));\n\n        // Optionally, update the overall task lists\n        setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n          ...list,\n          tasks: list.tasks ? list.tasks.map(t => t.id === id ? updatedTask : t) : []\n        } : list));\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error toggling task:\", error);\n    }\n  };\n\n  // Function to delete a task\n  const deleteTask = async taskId => {\n    try {\n      await axios.delete(`http://localhost:5000/tasks/${taskId}`);\n\n      // Update the tasks in the selectedList by removing the deleted task\n      setSelectedList(prevList => ({\n        ...prevList,\n        tasks: prevList.tasks.filter(task => task.id !== taskId)\n      }));\n\n      // Optionally, update the overall task lists\n      setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n        ...list,\n        tasks: list.tasks.filter(task => task.id !== taskId)\n      } : list));\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  if (!selectedList) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Select a title to manage tasks.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 31\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: selectedList.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), !editTask && /*#__PURE__*/_jsxDEV(TaskForm, {\n      onAddTask: addTask // Pass the addTask function\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }, this), editTask && /*#__PURE__*/_jsxDEV(EditTaskForm, {\n      task: editTask,\n      onSave: updateTask,\n      onCancel: () => setEditTask(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: selectedList.tasks // Ensure this is the updated tasks array\n      ,\n      onEdit: setEditTask,\n      onDelete: deleteTask,\n      onToggle: toggleTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskManager, \"DFDibKQTzbx/Oxc6w7pJl2vp7Pc=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","TaskList","TaskForm","EditTaskForm","jsxDEV","_jsxDEV","TaskManager","selectedTitleId","taskLists","setTaskLists","_s","editTask","setEditTask","selectedList","setSelectedList","tasks","setTasks","fetchTasks","response","get","data","console","log","error","addTask","description","due_date","priority","post","task","newTask","prevList","prevLists","map","list","id","updateTask","updatedTask","put","completed","toggleTask","t","deleteTask","taskId","delete","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","onAddTask","onSave","onCancel","onEdit","onDelete","onToggle","_c","$RefreshReg$"],"sources":["/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx"],"sourcesContent":["// TaskManager.jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\n\nconst TaskManager = ({ selectedTitleId, taskLists, setTaskLists }) => {\n    const [editTask, setEditTask] = useState(null);\n    const [selectedList, setSelectedList] = useState(null);\n    const [tasks, setTasks] = useState([]);\n  \n\n    // Fetch tasks for the selected title\n    useEffect(() => {\n        const fetchTasks = async () => {\n            if (!selectedTitleId) return; // If no title selected, do nothing\n            try {\n                const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}/tasks`);\n                setSelectedList(response.data); // This should include tasks\n                console.log(\"Fetched Tasks:\", response.data); // Debugging line\n            } catch (error) {\n                console.error(\"Error fetching tasks:\", error);\n            }\n        };\n        fetchTasks();\n    }, [selectedTitleId]);\n\n    // Function to add a new task\n    const addTask = async (description, due_date, priority) => {\n      if (!selectedTitleId) {\n          console.error(\"No title selected!\");\n          return; // Exit the function if no title is selected\n      }\n  \n      try {\n          const response = await axios.post(\n              `http://localhost:5000/titles/${selectedTitleId}/tasks`,\n              { description, due_date, priority }\n          );\n  \n          if (response.data && response.data.task) {\n              const newTask = response.data.task;\n              console.log(\"New Task Added:\", newTask); // Debugging line\n  \n              setSelectedList((prevList) => ({\n                  ...prevList,\n                  tasks: [...prevList.tasks, newTask], // Update the task list\n              }));\n  \n              setTaskLists((prevLists) =>\n                  prevLists.map((list) =>\n                      list.id === selectedTitleId\n                          ? { ...list, tasks: [...list.tasks, newTask] }\n                          : list\n                  )\n              );\n          } else {\n              console.error(\"Invalid response structure:\", response.data);\n          }\n      } catch (error) {\n          console.error(\"Error adding task:\", error);\n      }\n  };\n\n    // Function to update a task\n    const updateTask = async (updatedTask) => {\n        try {\n            const response = await axios.put(\n                `http://localhost:5000/tasks/${updatedTask.id}`,\n                {\n                    description: updatedTask.description,\n                    due_date: updatedTask.due_date,\n                    priority: updatedTask.priority,\n                    completed: updatedTask.completed,\n                }\n            );\n\n            // Update the task in the local state\n            setSelectedList((prevList) => ({\n                ...prevList,\n                tasks: prevList.tasks.map((task) =>\n                    task.id === updatedTask.id ? response.data.task : task\n                ),\n            }));\n            setEditTask(null);\n        } catch (error) {\n            console.error(\"Error updating task:\", error);\n        }\n    };\n\n    // Function to toggle task completion\n    const toggleTask = async (id) => {\n      try {\n          const response = await axios.put(`http://localhost:5000/tasks/${id}/toggle`);\n  \n          if (response.data && response.data.task) {\n              const updatedTask = response.data.task;\n              console.log(\"Task Toggled:\", updatedTask); // Debugging line\n  \n              // Update the task in the selectedList\n              setSelectedList((prevList) => ({\n                  ...prevList,\n                  tasks: prevList.tasks ? prevList.tasks.map((task) =>\n                      task.id === id ? updatedTask : task\n                  ) : [], // Fallback to an empty array if tasks is undefined\n              }));\n  \n              // Optionally, update the overall task lists\n              setTaskLists((prevLists) =>\n                  prevLists.map((list) =>\n                      list.id === selectedTitleId\n                          ? { \n                              ...list, \n                              tasks: list.tasks ? list.tasks.map((t) => (t.id === id ? updatedTask : t)) : [] \n                            }\n                          : list\n                  )\n              );\n          } else {\n              console.error(\"Invalid response structure:\", response.data);\n          }\n  \n      } catch (error) {\n          console.error(\"Error toggling task:\", error);\n      }\n  };\n  \n    // Function to delete a task\n    const deleteTask = async (taskId) => {\n        try {\n            await axios.delete(`http://localhost:5000/tasks/${taskId}`);\n\n            // Update the tasks in the selectedList by removing the deleted task\n            setSelectedList((prevList) => ({\n                ...prevList,\n                tasks: prevList.tasks.filter((task) => task.id !== taskId),\n            }));\n\n            // Optionally, update the overall task lists\n            setTaskLists((prevLists) =>\n                prevLists.map((list) =>\n                    list.id === selectedTitleId\n                        ? { ...list, tasks: list.tasks.filter((task) => task.id !== taskId) }\n                        : list\n                )\n            );\n        } catch (error) {\n            console.error(\"Error deleting task:\", error);\n        }\n    };\n\n    if (!selectedList) return <div>Select a title to manage tasks.</div>;\n\n    return (\n        <div className=\"task-manager\">\n            <h3>{selectedList.title}</h3>\n\n            {!editTask && (\n                <TaskForm \n                    onAddTask={addTask} // Pass the addTask function\n                />\n            )}\n\n            {editTask && (\n                <EditTaskForm\n                    task={editTask}\n                    onSave={updateTask}\n                    onCancel={() => setEditTask(null)}\n                />\n            )}\n\n            <TaskList\n                tasks={selectedList.tasks} // Ensure this is the updated tasks array\n                onEdit={setEditTask}\n                onDelete={deleteTask}\n                onToggle={toggleTask}\n            />\n        </div>\n    );\n};\n\nexport default TaskManager;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,GAAGA,CAAC;EAAEC,eAAe;EAAEC,SAAS;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;;EAGtC;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMkB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI,CAACV,eAAe,EAAE,OAAO,CAAC;MAC9B,IAAI;QACA,MAAMW,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,gCAAgCZ,eAAe,QAAQ,CAAC;QACzFO,eAAe,CAACI,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;QAChCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACJ,CAAC;IACDN,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACV,eAAe,CAAC,CAAC;;EAErB;EACA,MAAMiB,OAAO,GAAG,MAAAA,CAAOC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IACzD,IAAI,CAACpB,eAAe,EAAE;MAClBc,OAAO,CAACE,KAAK,CAAC,oBAAoB,CAAC;MACnC,OAAO,CAAC;IACZ;IAEA,IAAI;MACA,MAAML,QAAQ,GAAG,MAAMlB,KAAK,CAAC4B,IAAI,CAC7B,gCAAgCrB,eAAe,QAAQ,EACvD;QAAEkB,WAAW;QAAEC,QAAQ;QAAEC;MAAS,CACtC,CAAC;MAED,IAAIT,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACS,IAAI,EAAE;QACrC,MAAMC,OAAO,GAAGZ,QAAQ,CAACE,IAAI,CAACS,IAAI;QAClCR,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEQ,OAAO,CAAC,CAAC,CAAC;;QAEzChB,eAAe,CAAEiB,QAAQ,KAAM;UAC3B,GAAGA,QAAQ;UACXhB,KAAK,EAAE,CAAC,GAAGgB,QAAQ,CAAChB,KAAK,EAAEe,OAAO,CAAC,CAAE;QACzC,CAAC,CAAC,CAAC;QAEHrB,YAAY,CAAEuB,SAAS,IACnBA,SAAS,CAACC,GAAG,CAAEC,IAAI,IACfA,IAAI,CAACC,EAAE,KAAK5B,eAAe,GACrB;UAAE,GAAG2B,IAAI;UAAEnB,KAAK,EAAE,CAAC,GAAGmB,IAAI,CAACnB,KAAK,EAAEe,OAAO;QAAE,CAAC,GAC5CI,IACV,CACJ,CAAC;MACL,CAAC,MAAM;QACHb,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEL,QAAQ,CAACE,IAAI,CAAC;MAC/D;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC9C;EACJ,CAAC;;EAEC;EACA,MAAMa,UAAU,GAAG,MAAOC,WAAW,IAAK;IACtC,IAAI;MACA,MAAMnB,QAAQ,GAAG,MAAMlB,KAAK,CAACsC,GAAG,CAC5B,+BAA+BD,WAAW,CAACF,EAAE,EAAE,EAC/C;QACIV,WAAW,EAAEY,WAAW,CAACZ,WAAW;QACpCC,QAAQ,EAAEW,WAAW,CAACX,QAAQ;QAC9BC,QAAQ,EAAEU,WAAW,CAACV,QAAQ;QAC9BY,SAAS,EAAEF,WAAW,CAACE;MAC3B,CACJ,CAAC;;MAED;MACAzB,eAAe,CAAEiB,QAAQ,KAAM;QAC3B,GAAGA,QAAQ;QACXhB,KAAK,EAAEgB,QAAQ,CAAChB,KAAK,CAACkB,GAAG,CAAEJ,IAAI,IAC3BA,IAAI,CAACM,EAAE,KAAKE,WAAW,CAACF,EAAE,GAAGjB,QAAQ,CAACE,IAAI,CAACS,IAAI,GAAGA,IACtD;MACJ,CAAC,CAAC,CAAC;MACHjB,WAAW,CAAC,IAAI,CAAC;IACrB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;;EAED;EACA,MAAMiB,UAAU,GAAG,MAAOL,EAAE,IAAK;IAC/B,IAAI;MACA,MAAMjB,QAAQ,GAAG,MAAMlB,KAAK,CAACsC,GAAG,CAAC,+BAA+BH,EAAE,SAAS,CAAC;MAE5E,IAAIjB,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACS,IAAI,EAAE;QACrC,MAAMQ,WAAW,GAAGnB,QAAQ,CAACE,IAAI,CAACS,IAAI;QACtCR,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEe,WAAW,CAAC,CAAC,CAAC;;QAE3C;QACAvB,eAAe,CAAEiB,QAAQ,KAAM;UAC3B,GAAGA,QAAQ;UACXhB,KAAK,EAAEgB,QAAQ,CAAChB,KAAK,GAAGgB,QAAQ,CAAChB,KAAK,CAACkB,GAAG,CAAEJ,IAAI,IAC5CA,IAAI,CAACM,EAAE,KAAKA,EAAE,GAAGE,WAAW,GAAGR,IACnC,CAAC,GAAG,EAAE,CAAE;QACZ,CAAC,CAAC,CAAC;;QAEH;QACApB,YAAY,CAAEuB,SAAS,IACnBA,SAAS,CAACC,GAAG,CAAEC,IAAI,IACfA,IAAI,CAACC,EAAE,KAAK5B,eAAe,GACrB;UACE,GAAG2B,IAAI;UACPnB,KAAK,EAAEmB,IAAI,CAACnB,KAAK,GAAGmB,IAAI,CAACnB,KAAK,CAACkB,GAAG,CAAEQ,CAAC,IAAMA,CAAC,CAACN,EAAE,KAAKA,EAAE,GAAGE,WAAW,GAAGI,CAAE,CAAC,GAAG;QAC/E,CAAC,GACDP,IACV,CACJ,CAAC;MACL,CAAC,MAAM;QACHb,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEL,QAAQ,CAACE,IAAI,CAAC;MAC/D;IAEJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;;EAEC;EACA,MAAMmB,UAAU,GAAG,MAAOC,MAAM,IAAK;IACjC,IAAI;MACA,MAAM3C,KAAK,CAAC4C,MAAM,CAAC,+BAA+BD,MAAM,EAAE,CAAC;;MAE3D;MACA7B,eAAe,CAAEiB,QAAQ,KAAM;QAC3B,GAAGA,QAAQ;QACXhB,KAAK,EAAEgB,QAAQ,CAAChB,KAAK,CAAC8B,MAAM,CAAEhB,IAAI,IAAKA,IAAI,CAACM,EAAE,KAAKQ,MAAM;MAC7D,CAAC,CAAC,CAAC;;MAEH;MACAlC,YAAY,CAAEuB,SAAS,IACnBA,SAAS,CAACC,GAAG,CAAEC,IAAI,IACfA,IAAI,CAACC,EAAE,KAAK5B,eAAe,GACrB;QAAE,GAAG2B,IAAI;QAAEnB,KAAK,EAAEmB,IAAI,CAACnB,KAAK,CAAC8B,MAAM,CAAEhB,IAAI,IAAKA,IAAI,CAACM,EAAE,KAAKQ,MAAM;MAAE,CAAC,GACnET,IACV,CACJ,CAAC;IACL,CAAC,CAAC,OAAOX,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,IAAI,CAACV,YAAY,EAAE,oBAAOR,OAAA;IAAAyC,QAAA,EAAK;EAA+B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEpE,oBACI7C,OAAA;IAAK8C,SAAS,EAAC,cAAc;IAAAL,QAAA,gBACzBzC,OAAA;MAAAyC,QAAA,EAAKjC,YAAY,CAACuC;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE5B,CAACvC,QAAQ,iBACNN,OAAA,CAACH,QAAQ;MACLmD,SAAS,EAAE7B,OAAQ,CAAC;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CACJ,EAEAvC,QAAQ,iBACLN,OAAA,CAACF,YAAY;MACT0B,IAAI,EAAElB,QAAS;MACf2C,MAAM,EAAElB,UAAW;MACnBmB,QAAQ,EAAEA,CAAA,KAAM3C,WAAW,CAAC,IAAI;IAAE;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CACJ,eAED7C,OAAA,CAACJ,QAAQ;MACLc,KAAK,EAAEF,YAAY,CAACE,KAAM,CAAC;MAAA;MAC3ByC,MAAM,EAAE5C,WAAY;MACpB6C,QAAQ,EAAEf,UAAW;MACrBgB,QAAQ,EAAElB;IAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACxC,EAAA,CA7KIJ,WAAW;AAAAqD,EAAA,GAAXrD,WAAW;AA+KjB,eAAeA,WAAW;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}