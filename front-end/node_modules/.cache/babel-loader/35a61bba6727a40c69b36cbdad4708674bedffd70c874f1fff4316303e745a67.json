{"ast":null,"code":"var _jsxFileName = \"/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx\",\n  _s = $RefreshSig$();\n// TaskManager.jsx\nimport React, { useState } from \"react\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskManager({\n  selectedTitleId,\n  taskLists,\n  setTaskLists\n}) {\n  _s();\n  const [editTask, setEditTask] = useState(null);\n\n  // Derive selectedList from taskLists\n  const selectedList = taskLists.find(list => list.id === selectedTitleId);\n  const addTask = async description => {\n    try {\n      const response = await axios.post(`http://localhost:5000/titles/${selectedTitleId}/tasks`, {\n        description\n      });\n      console.log(\"Full Response Data:\", response.data); // Detailed logging\n\n      // Extract the new task from the response\n      const newTask = response.data.task;\n      if (newTask) {\n        console.log(\"New Task Added:\", newTask); // Verify newTask content\n\n        // Update the taskLists in the state\n        setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n          ...list,\n          tasks: [...list.tasks, newTask]\n        } : list));\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Update task\n  const updateTask = async updatedTask => {\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${updatedTask.id}`, {\n        description: updatedTask.description,\n        due_date: updatedTask.due_date,\n        priority: updatedTask.priority,\n        completed: updatedTask.completed\n      });\n      // Update the task in the taskLists state\n      setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n        ...list,\n        tasks: list.tasks.map(task => task.id === updatedTask.id ? response.data.task : task)\n      } : list));\n      setEditTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Toggle task\n  const toggleTask = async id => {\n    const task = selectedList.tasks.find(t => t.id === id);\n    if (!task) {\n      console.error(\"Task not found:\", id);\n      return;\n    }\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${id}`, {\n        completed: !task.completed // Toggle the completed status\n      });\n      const updatedTask = response.data.task;\n      setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n        ...list,\n        tasks: list.tasks.map(t => t.id === id ? updatedTask : t)\n      } : list));\n    } catch (error) {\n      console.error(\"Error toggling task:\", error);\n    }\n  };\n\n  // Delete task\n  const deleteTask = async taskId => {\n    try {\n      await axios.delete(`http://localhost:5000/tasks/${taskId}`);\n\n      // Update the taskLists by removing the deleted task\n      setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n        ...list,\n        tasks: list.tasks.filter(task => task.id !== taskId)\n      } : list));\n\n      // If the deleted task was being edited, cancel editing\n      if (editTask && editTask.id === taskId) {\n        setEditTask(null);\n      }\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  if (!selectedList) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Select a title to manage tasks.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      children: selectedList.title || \"Title not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), !editTask && selectedList && /*#__PURE__*/_jsxDEV(TaskForm, {\n      selectedTitleId: selectedTitleId,\n      onAddTask: description => addTask(description)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), editTask && /*#__PURE__*/_jsxDEV(EditTaskForm, {\n      task: editTask,\n      onSave: updateTask,\n      onCancel: () => setEditTask(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: selectedList.tasks || [],\n      onEdit: setEditTask,\n      onDelete: deleteTask,\n      onToggle: toggleTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskManager, \"Mp8AyM1dyOaJ8DGXjHahly3s1uA=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","TaskList","TaskForm","EditTaskForm","axios","jsxDEV","_jsxDEV","TaskManager","selectedTitleId","taskLists","setTaskLists","_s","editTask","setEditTask","selectedList","find","list","id","addTask","description","response","post","console","log","data","newTask","task","prevLists","map","tasks","error","updateTask","updatedTask","put","due_date","priority","completed","toggleTask","t","deleteTask","taskId","delete","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","style","cursor","title","onAddTask","onSave","onCancel","onEdit","onDelete","onToggle","_c","$RefreshReg$"],"sources":["/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx"],"sourcesContent":["// TaskManager.jsx\nimport React, { useState } from \"react\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport axios from \"axios\";\n\nfunction TaskManager({ selectedTitleId, taskLists, setTaskLists }) {\n  const [editTask, setEditTask] = useState(null);\n\n  // Derive selectedList from taskLists\n  const selectedList = taskLists.find((list) => list.id === selectedTitleId);\n\n  const addTask = async (description) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5000/titles/${selectedTitleId}/tasks`,\n        { description }\n      );\n\n      console.log(\"Full Response Data:\", response.data); // Detailed logging\n\n      // Extract the new task from the response\n      const newTask = response.data.task;\n\n      if (newTask) {\n        console.log(\"New Task Added:\", newTask); // Verify newTask content\n\n        // Update the taskLists in the state\n        setTaskLists((prevLists) =>\n          prevLists.map((list) =>\n            list.id === selectedTitleId\n              ? { ...list, tasks: [...list.tasks, newTask] }\n              : list\n          )\n        );\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n\n    } catch(error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Update task\n  const updateTask = async (updatedTask) => {\n    try {\n      const response = await axios.put(\n        `http://localhost:5000/tasks/${updatedTask.id}`,\n        {\n          description: updatedTask.description,\n          due_date: updatedTask.due_date,\n          priority: updatedTask.priority,\n          completed: updatedTask.completed,\n        }\n      );\n      // Update the task in the taskLists state\n      setTaskLists((prevLists) =>\n        prevLists.map((list) =>\n          list.id === selectedTitleId\n            ? { \n                ...list, \n                tasks: list.tasks.map((task) =>\n                  task.id === updatedTask.id ? response.data.task : task\n                ) \n              }\n            : list\n        )\n      );\n      setEditTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Toggle task\n  const toggleTask = async (id) => {\n    const task = selectedList.tasks.find((t) => t.id === id);\n    if (!task) {\n      console.error(\"Task not found:\", id);\n      return;\n    }\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${id}`, {\n        completed: !task.completed, // Toggle the completed status\n      });\n      const updatedTask = response.data.task;\n\n      setTaskLists((prevLists) =>\n        prevLists.map((list) =>\n          list.id === selectedTitleId\n            ? { \n                ...list, \n                tasks: list.tasks.map((t) =>\n                  t.id === id ? updatedTask : t\n                ) \n              }\n            : list\n        )\n      );\n    } catch (error) {\n      console.error(\"Error toggling task:\", error);\n    }\n  };\n\n  // Delete task\n  const deleteTask = async (taskId) => {\n    try {\n      await axios.delete(`http://localhost:5000/tasks/${taskId}`);\n      \n      // Update the taskLists by removing the deleted task\n      setTaskLists((prevLists) =>\n        prevLists.map((list) =>\n          list.id === selectedTitleId\n            ? { \n                ...list, \n                tasks: list.tasks.filter((task) => task.id !== taskId) \n              }\n            : list\n        )\n      );\n      \n      // If the deleted task was being edited, cancel editing\n      if (editTask && editTask.id === taskId) {\n        setEditTask(null);\n      }\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n\n  if (!selectedList) return <div>Select a title to manage tasks.</div>;\n\n  return (\n    <div>\n      <h3 style={{ cursor: \"pointer\" }}>\n        {selectedList.title || \"Title not found\"}\n      </h3>\n\n      {!editTask && selectedList && (\n        <TaskForm \n          selectedTitleId={selectedTitleId}\n          onAddTask={(description) => addTask(description)}\n        />\n      )}\n\n      {editTask && (\n        <EditTaskForm\n          task={editTask}\n          onSave={updateTask}\n          onCancel={() => setEditTask(null)}\n        />\n      )}\n\n      <TaskList\n        tasks={selectedList.tasks || []}\n        onEdit={setEditTask}\n        onDelete={deleteTask}\n        onToggle={toggleTask}\n      />\n    </div>\n  );\n}\n\nexport default TaskManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}