{"ast":null,"code":"var _jsxFileName = \"/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TaskList from \"./TaskList\";\nimport AddTaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskManager({\n  selectedTitleId,\n  TaskList,\n  setTaskLists\n}) {\n  _s();\n  const [editTask, setEditTask] = useState(null);\n  const [selectedList, setSelectedList] = useState(null);\n\n  // Fetch tasks for the selected title\n  useEffect(() => {\n    console.log(\"Current selectedTitleId in TaskManager:\", selectedTitleId);\n    const fetchTasks = async () => {\n      if (!selectedTitleId) return; // If no title selected, do nothing\n      try {\n        const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}`);\n        setSelectedList(response.data); // This should include tasks\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, [selectedTitleId]);\n  const addTask = async description => {\n    try {\n      const response = await axios.post(`http://localhost:5000/titles/${selectedTitleId}/tasks`, {\n        task_title: description\n      });\n\n      // Immediately update the state without needing to refetch\n      const newTask = response.data;\n\n      // Update the tasks in the selectedList\n      setSelectedList(prevList => ({\n        ...prevList,\n        tasks: [...prevList.tasks, newTask] // Add the new task to the existing tasks\n      }));\n\n      // Optionally, you could also update the overall task lists\n      setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n        ...list,\n        tasks: [...list.tasks, newTask]\n      } : list));\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Update task\n  const updateTask = async updatedTask => {\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${updatedTask.id}`, {\n        description: updatedTask.description,\n        due_date: updatedTask.due_date,\n        priority: updatedTask.priority,\n        completed: updatedTask.completed\n      });\n      // Update the task in the local state\n      setSelectedList(prevList => ({\n        ...prevList,\n        tasks: prevList.tasks.map(task => task.id === updatedTask.id ? response.data : task)\n      }));\n      setEditTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Toggle task\n  const toggleTask = async id => {\n    const task = selectedList.tasks.find(t => t.id === id);\n    if (!task) return; // Ensure the task exists\n\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${id}`, {\n        completed: !task.completed // Toggle the completed status\n      });\n      const updatedList = {\n        ...selectedList,\n        tasks: selectedList.tasks.map(t => t.id === id ? {\n          ...t,\n          completed: !t.completed\n        } : t // Update locally\n        )\n      };\n\n      // Optionally, use the response data if it contains updated task info\n      if (response.data) {\n        updatedList.tasks = updatedList.tasks.map(t => t.id === id ? response.data : t);\n      }\n      setSelectedList(updatedList); // Update local state with the new task list\n      setTaskLists(prev => prev.map(list => list.id === selectedTitleId ? updatedList : list));\n    } catch (error) {\n      console.error(\"Error toggling task:\", error);\n    }\n  };\n  useEffect(() => {\n    // This can be used to fetch tasks for the selected title if not already done\n  }, [selectedTitleId]);\n  if (!selectedList) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Select a title to manage tasks.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 29\n  }, this);\n  const deleteTask = async taskId => {\n    try {\n      await axios.delete(`http://localhost:5000/tasks/${taskId}`);\n\n      // Update the tasks in the selectedList by removing the deleted task\n      setSelectedList(prevList => ({\n        ...prevList,\n        tasks: prevList.tasks.filter(task => task.id !== taskId)\n      }));\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      children: selectedList ? selectedList.title : \"Title not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), !editTask && selectedList && /*#__PURE__*/_jsxDEV(AddTaskForm, {\n      selectedTitleId: selectedTitleId,\n      onAddTask: description => addTask(description)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), editTask ? /*#__PURE__*/_jsxDEV(EditTaskForm, {\n      task: editTask,\n      onSave: updateTask,\n      onCancel: () => setEditTask(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: selectedList ? selectedList.tasks : [],\n      onEdit: setEditTask,\n      onDelete: deleteTask,\n      onToggle: toggleTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskManager, \"0rolthMnKkUnJvEGdIZTlrVesRc=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","TaskList","AddTaskForm","EditTaskForm","axios","jsxDEV","_jsxDEV","TaskManager","selectedTitleId","setTaskLists","_s","editTask","setEditTask","selectedList","setSelectedList","console","log","fetchTasks","response","get","data","error","addTask","description","post","task_title","newTask","prevList","tasks","prevLists","map","list","id","updateTask","updatedTask","put","due_date","priority","completed","task","toggleTask","find","t","updatedList","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","deleteTask","taskId","delete","filter","style","cursor","title","onAddTask","onSave","onCancel","onEdit","onDelete","onToggle","_c","$RefreshReg$"],"sources":["/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TaskList from \"./TaskList\";\nimport AddTaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport axios from \"axios\";\n\nfunction TaskManager({ selectedTitleId, TaskList, setTaskLists }) {\n  const [editTask, setEditTask] = useState(null);\n  const [selectedList, setSelectedList] = useState(null);\n\n  // Fetch tasks for the selected title\n  useEffect(() => {\n    console.log(\"Current selectedTitleId in TaskManager:\", selectedTitleId);\n    const fetchTasks = async () => {\n      if (!selectedTitleId) return; // If no title selected, do nothing\n      try {\n        const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}`);\n        setSelectedList(response.data); // This should include tasks\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, [selectedTitleId]);\n  \n  const addTask = async (description) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5000/titles/${selectedTitleId}/tasks`,\n        { task_title: description }\n      );\n  \n      // Immediately update the state without needing to refetch\n      const newTask = response.data;\n  \n      // Update the tasks in the selectedList\n      setSelectedList((prevList) => ({\n        ...prevList,\n        tasks: [...prevList.tasks, newTask], // Add the new task to the existing tasks\n      }));\n  \n      // Optionally, you could also update the overall task lists\n      setTaskLists((prevLists) =>\n        prevLists.map((list) =>\n          list.id === selectedTitleId\n            ? { ...list, tasks: [...list.tasks, newTask] }\n            : list\n        )\n      );\n  \n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n  \n  \n  \n  \n\n  // Update task\n  const updateTask = async (updatedTask) => {\n    try {\n      const response = await axios.put(\n        `http://localhost:5000/tasks/${updatedTask.id}`,\n        {\n          description: updatedTask.description,\n          due_date: updatedTask.due_date,\n          priority: updatedTask.priority,\n          completed: updatedTask.completed,\n        }\n      );\n      // Update the task in the local state\n      setSelectedList((prevList) => ({\n        ...prevList,\n        tasks: prevList.tasks.map((task) =>\n          task.id === updatedTask.id ? response.data : task\n        ),\n      }));\n      setEditTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n  \n\n  \n\n\n\n  // Toggle task\nconst toggleTask = async (id) => {\n    const task = selectedList.tasks.find((t) => t.id === id);\n    if (!task) return; // Ensure the task exists\n\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${id}`, {\n        completed: !task.completed, // Toggle the completed status\n      });\n\n      const updatedList = {\n        ...selectedList,\n        tasks: selectedList.tasks.map((t) =>\n          t.id === id ? { ...t, completed: !t.completed } : t // Update locally\n        ),\n      };\n\n      // Optionally, use the response data if it contains updated task info\n      if (response.data) {\n        updatedList.tasks = updatedList.tasks.map((t) =>\n          t.id === id ? response.data : t\n        );\n      }\n\n      setSelectedList(updatedList); // Update local state with the new task list\n      setTaskLists((prev) =>\n        prev.map((list) => (list.id === selectedTitleId ? updatedList : list))\n      );\n    } catch (error) {\n      console.error(\"Error toggling task:\", error);\n    }\n  };\n\n  useEffect(() => {\n    // This can be used to fetch tasks for the selected title if not already done\n  }, [selectedTitleId]);\n\n  if (!selectedList) return <div>Select a title to manage tasks.</div>;\n\n  const deleteTask = async (taskId) => {\n    try {\n      await axios.delete(`http://localhost:5000/tasks/${taskId}`);\n      \n      // Update the tasks in the selectedList by removing the deleted task\n      setSelectedList((prevList) => ({\n        ...prevList,\n        tasks: prevList.tasks.filter((task) => task.id !== taskId),\n      }));\n      \n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n\n  return (\n    <div>\n      {/* Display the title section */}\n      <h3 style={{ cursor: \"pointer\" }}>\n      {selectedList ? selectedList.title : \"Title not found\"}\n      </h3>\n\n      {/* Conditionally render AddTaskForm based on the selected title */}\n      {!editTask && selectedList && (\n      <AddTaskForm \n        selectedTitleId={selectedTitleId}\n        onAddTask={(description) => addTask(description)}\n      />\n      )}\n\n      {editTask ? (\n        <EditTaskForm\n          task={editTask}\n          onSave={updateTask}\n          onCancel={() => setEditTask(null)}\n        />\n      ) : null}\n\n      {/* TaskList component */}\n      <TaskList\n        tasks={selectedList ? selectedList.tasks : []}\n        onEdit={setEditTask}\n        onDelete={deleteTask}\n        onToggle={toggleTask}\n      />\n    </div>\n  );\n}\n\nexport default TaskManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}