{"ast":null,"code":"var _jsxFileName = \"/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx\",\n  _s = $RefreshSig$();\n// TaskManager.jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskManager = ({\n  selectedTitleId\n}) => {\n  _s();\n  const [editTask, setEditTask] = useState(null);\n  const [selectedList, setSelectedList] = useState({\n    tasks: []\n  }); // Initialize with tasks array\n\n  // Fetch tasks for the selected title\n  useEffect(() => {\n    const fetchTasks = async () => {\n      if (!selectedTitleId) return; // If no title selected, do nothing\n      try {\n        const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}/tasks`);\n        setSelectedList(response.data); // This should include tasks\n        console.log(\"Fetched Tasks:\", response.data); // Debugging line\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, [selectedTitleId]);\n\n  // Function to add a new task\n  const addTask = async (description, due_date, priority) => {\n    if (!selectedTitleId) {\n      console.error(\"No title selected!\");\n      return; // Exit the function if no title is selected\n    }\n    try {\n      const response = await axios.post(`http://localhost:5000/titles/${selectedTitleId}/tasks`, {\n        description,\n        due_date,\n        priority\n      });\n      if (response.data && response.data.task) {\n        // Correctly check for response.data.task\n        const newTask = response.data.task; // Extract the task object\n        console.log(\"New Task Added:\", newTask); // Debugging line\n\n        // Update the selectedList state with the new task\n        setSelectedList(prevList => ({\n          ...prevList,\n          tasks: [...prevList.tasks, newTask] // Update the task list\n        }));\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Function to delete a task\n  const deleteTask = async taskId => {\n    if (!selectedTitleId) {\n      console.error(\"No title selected!\");\n      return; // Exit if no title is selected\n    }\n    try {\n      await axios.delete(`http://localhost:5000/titles/${selectedTitleId}/tasks/${taskId}`);\n      console.log('Task deleted successfully');\n\n      // Update the local state after a successful delete\n      setSelectedList(prevList => ({\n        ...prevList,\n        tasks: prevList.tasks.filter(task => task.id !== taskId)\n      }));\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n\n  // Function to update a task\n  const updateTask = async updatedTask => {\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${updatedTask.id}`, {\n        description: updatedTask.description,\n        due_date: updatedTask.due_date,\n        priority: updatedTask.priority,\n        completed: updatedTask.completed\n      });\n      console.log(\"Server response:\", response.data);\n\n      // Update the task in the local state\n      setSelectedList(prevList => ({\n        ...prevList,\n        tasks: prevList.tasks.map(task => task.id === updatedTask.id ? response.data.task : task)\n      }));\n      setEditTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Function to toggle task completion\n  const toggleTask = async id => {\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${id}/toggle`);\n      if (response.data && response.data.task) {\n        // Correctly check for response.data.task\n        const updatedTask = response.data.task;\n        console.log(\"Task Toggled:\", updatedTask); // Debugging line\n\n        // Update the task in the selectedList\n        setSelectedList(prevList => ({\n          ...prevList,\n          tasks: prevList.tasks.map(task => task.id === id ? updatedTask : task)\n        }));\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error toggling task:\", error);\n    }\n  };\n  if (!selectedList) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Select a title to manage tasks.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 31\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: selectedList.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), !editTask && /*#__PURE__*/_jsxDEV(TaskForm, {\n      onAddTask: addTask // Pass the addTask function\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }, this), editTask && /*#__PURE__*/_jsxDEV(EditTaskForm, {\n      task: editTask,\n      onSave: updateTask,\n      onCancel: () => setEditTask(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: selectedList.tasks // Ensure this is the updated tasks array\n      ,\n      onEdit: setEditTask,\n      onDelete: deleteTask,\n      onToggle: toggleTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskManager, \"qEEI4f3IK01zZlDlTXZDB7vnZGo=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","TaskList","TaskForm","EditTaskForm","jsxDEV","_jsxDEV","TaskManager","selectedTitleId","_s","editTask","setEditTask","selectedList","setSelectedList","tasks","fetchTasks","response","get","data","console","log","error","addTask","description","due_date","priority","post","task","newTask","prevList","deleteTask","taskId","delete","filter","id","updateTask","updatedTask","put","completed","map","toggleTask","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","onAddTask","onSave","onCancel","onEdit","onDelete","onToggle","_c","$RefreshReg$"],"sources":["/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx"],"sourcesContent":["// TaskManager.jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\n\nconst TaskManager = ({ selectedTitleId }) => {\n    const [editTask, setEditTask] = useState(null);\n    const [selectedList, setSelectedList] = useState({ tasks: [] }); // Initialize with tasks array\n\n    // Fetch tasks for the selected title\n    useEffect(() => {\n        const fetchTasks = async () => {\n            if (!selectedTitleId) return; // If no title selected, do nothing\n            try {\n                const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}/tasks`);\n                setSelectedList(response.data); // This should include tasks\n                console.log(\"Fetched Tasks:\", response.data); // Debugging line\n            } catch (error) {\n                console.error(\"Error fetching tasks:\", error);\n            }\n        };\n        fetchTasks();\n    }, [selectedTitleId]);\n\n    // Function to add a new task\n    const addTask = async (description, due_date, priority) => {\n        if (!selectedTitleId) {\n            console.error(\"No title selected!\");\n            return; // Exit the function if no title is selected\n        }\n\n        try {\n            const response = await axios.post(\n                `http://localhost:5000/titles/${selectedTitleId}/tasks`,\n                { description, due_date, priority }\n            );\n\n            if (response.data && response.data.task) { // Correctly check for response.data.task\n                const newTask = response.data.task; // Extract the task object\n                console.log(\"New Task Added:\", newTask); // Debugging line\n\n                // Update the selectedList state with the new task\n                setSelectedList((prevList) => ({\n                    ...prevList,\n                    tasks: [...prevList.tasks, newTask], // Update the task list\n                }));\n            } else {\n                console.error(\"Invalid response structure:\", response.data);\n            }\n        } catch (error) {\n            console.error(\"Error adding task:\", error);\n        }\n    };\n\n    // Function to delete a task\n    const deleteTask = async (taskId) => {\n        if (!selectedTitleId) {\n            console.error(\"No title selected!\");\n            return; // Exit if no title is selected\n        }\n\n        try {\n            await axios.delete(`http://localhost:5000/titles/${selectedTitleId}/tasks/${taskId}`);\n            console.log('Task deleted successfully');\n\n            // Update the local state after a successful delete\n            setSelectedList((prevList) => ({\n                ...prevList,\n                tasks: prevList.tasks.filter((task) => task.id !== taskId),\n            }));\n        } catch (error) {\n            console.error(\"Error deleting task:\", error);\n        }\n    };\n\n    // Function to update a task\n    const updateTask = async (updatedTask) => {\n        try {\n            const response = await axios.put(\n                `http://localhost:5000/tasks/${updatedTask.id}`,\n                {\n                    description: updatedTask.description,\n                    due_date: updatedTask.due_date,\n                    priority: updatedTask.priority,\n                    completed: updatedTask.completed,\n                }\n            );\n            console.log(\"Server response:\", response.data);\n\n            // Update the task in the local state\n            setSelectedList((prevList) => ({\n                ...prevList,\n                tasks: prevList.tasks.map((task) =>\n                    task.id === updatedTask.id ? response.data.task : task\n                ),\n            }));\n            setEditTask(null);\n        } catch (error) {\n            console.error(\"Error updating task:\", error);\n        }\n    };\n\n    // Function to toggle task completion\n    const toggleTask = async (id) => {\n        try {\n            const response = await axios.put(`http://localhost:5000/tasks/${id}/toggle`);\n\n            if (response.data && response.data.task) { // Correctly check for response.data.task\n                const updatedTask = response.data.task;\n                console.log(\"Task Toggled:\", updatedTask); // Debugging line\n\n                // Update the task in the selectedList\n                setSelectedList((prevList) => ({\n                    ...prevList,\n                    tasks: prevList.tasks.map((task) =>\n                        task.id === id ? updatedTask : task\n                    ),\n                }));\n            } else {\n                console.error(\"Invalid response structure:\", response.data);\n            }\n\n        } catch (error) {\n            console.error(\"Error toggling task:\", error);\n        }\n    };\n\n    if (!selectedList) return <div>Select a title to manage tasks.</div>;\n\n    return (\n        <div className=\"task-manager\">\n            <h3>{selectedList.title}</h3>\n\n            {!editTask && (\n                <TaskForm \n                    onAddTask={addTask} // Pass the addTask function\n                />\n            )}\n\n            {editTask && (\n                <EditTaskForm\n                    task={editTask}\n                    onSave={updateTask}\n                    onCancel={() => setEditTask(null)}\n                />\n            )}\n\n            <TaskList\n                tasks={selectedList.tasks} // Ensure this is the updated tasks array\n                onEdit={setEditTask}\n                onDelete={deleteTask}\n                onToggle={toggleTask}\n            />\n        </div>\n    );\n};\n\nexport default TaskManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}