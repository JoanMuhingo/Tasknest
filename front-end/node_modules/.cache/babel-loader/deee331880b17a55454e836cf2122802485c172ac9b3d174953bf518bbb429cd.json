{"ast":null,"code":"var _jsxFileName = \"/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx\",\n  _s = $RefreshSig$();\n// TaskManager.jsx\nimport React, { useState, useEffect } from 'react';\nimport TaskList from './TaskList';\nimport TaskForm from './TaskForm';\nimport EditTaskForm from './EditTaskForm';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskManager = ({\n  selectedTitleId,\n  taskLists,\n  setTaskLists\n}) => {\n  _s();\n  const [editTask, setEditTask] = useState(null);\n  const [selectedList, setSelectedList] = useState(null);\n\n  // Fetch the selected list based on selectedTitleId\n  useEffect(() => {\n    console.log(\"Current selectedTitleId in TaskManager:\", selectedTitleId);\n    const list = taskLists.find(list => list.id === selectedTitleId);\n    setSelectedList(list);\n  }, [selectedTitleId, taskLists]);\n\n  // Add Task Function\n  const addTask = async description => {\n    try {\n      const response = await axios.post(`http://localhost:5000/titles/${selectedTitleId}/tasks`, {\n        description\n      });\n      console.log(\"Full Response Data:\", response.data); // Detailed logging\n\n      // Extract the new task from the response\n      const newTask = response.data.task;\n      if (newTask) {\n        console.log(\"New Task Added:\", newTask); // Verify newTask content\n\n        // Update the taskLists in the state\n        setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n          ...list,\n          tasks: [...list.tasks, newTask]\n        } : list));\n        console.log(\"Task Lists Updated:\", taskLists);\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Edit Task Function\n  const editTaskHandler = task => {\n    setEditTask(task);\n  };\n\n  // Update Task Function\n  const updateTask = async updatedTask => {\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${updatedTask.id}`, {\n        description: updatedTask.description,\n        due_date: updatedTask.due_date,\n        priority: updatedTask.priority,\n        completed: updatedTask.completed\n      });\n      console.log(\"Task Updated:\", response.data); // For debugging\n\n      const updatedTaskData = response.data.task;\n      if (updatedTaskData) {\n        // Update the taskLists in the state\n        setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n          ...list,\n          tasks: list.tasks.map(task => task.id === updatedTaskData.id ? updatedTaskData : task)\n        } : list));\n\n        // Clear the editTask state\n        setEditTask(null);\n      } else {\n        console.error(\"Updated task data is missing in response:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Toggle Task Completion Function\n  const toggleTask = async id => {\n    const task = selectedList.tasks.find(t => t.id === id);\n    if (!task) {\n      console.error(\"Task not found:\", id);\n      return;\n    }\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${id}`, {\n        completed: !task.completed // Toggle the completed status\n      });\n      console.log(\"Task Toggled:\", response.data); // For debugging\n\n      const updatedTask = response.data.task;\n      if (updatedTask) {\n        // Update the taskLists in the state\n        setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n          ...list,\n          tasks: list.tasks.map(t => t.id === id ? updatedTask : t)\n        } : list));\n      } else {\n        console.error(\"Toggled task data is missing in response:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error toggling task:\", error);\n    }\n  };\n\n  // Delete Task Function\n  const deleteTask = async taskId => {\n    try {\n      await axios.delete(`http://localhost:5000/tasks/${taskId}`);\n      console.log(`Task with ID ${taskId} deleted successfully.`); // For debugging\n\n      // Update the taskLists in the state by removing the deleted task\n      setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n        ...list,\n        tasks: list.tasks.filter(task => task.id !== taskId)\n      } : list));\n\n      // If the deleted task was being edited, cancel editing\n      if (editTask && editTask.id === taskId) {\n        setEditTask(null);\n      }\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n\n  // Optional: Log updated taskLists for debugging\n  useEffect(() => {\n    console.log(\"Updated Task Lists:\", taskLists);\n  }, [taskLists]);\n  if (!selectedList) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Select a title to manage tasks.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 31\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      children: selectedList.title || \"Title not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), !editTask && selectedList && /*#__PURE__*/_jsxDEV(TaskForm, {\n      onAddTask: description => addTask(description)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }, this), editTask && /*#__PURE__*/_jsxDEV(EditTaskForm, {\n      task: editTask,\n      onSave: updateTask,\n      onCancel: () => setEditTask(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: selectedList.tasks || [],\n      onEdit: editTaskHandler,\n      onDelete: deleteTask,\n      onToggle: toggleTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskManager, \"0rolthMnKkUnJvEGdIZTlrVesRc=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","TaskList","TaskForm","EditTaskForm","axios","jsxDEV","_jsxDEV","TaskManager","selectedTitleId","taskLists","setTaskLists","_s","editTask","setEditTask","selectedList","setSelectedList","console","log","list","find","id","addTask","description","response","post","data","newTask","task","prevLists","map","tasks","error","editTaskHandler","updateTask","updatedTask","put","due_date","priority","completed","updatedTaskData","toggleTask","t","deleteTask","taskId","delete","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","style","cursor","title","onAddTask","onSave","onCancel","onEdit","onDelete","onToggle","_c","$RefreshReg$"],"sources":["/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx"],"sourcesContent":["// TaskManager.jsx\nimport React, { useState, useEffect } from 'react';\nimport TaskList from './TaskList';\nimport TaskForm from './TaskForm';\nimport EditTaskForm from './EditTaskForm';\nimport axios from 'axios';\n\nconst TaskManager = ({ selectedTitleId, taskLists, setTaskLists }) => {\n    const [editTask, setEditTask] = useState(null);\n    const [selectedList, setSelectedList] = useState(null);\n\n    // Fetch the selected list based on selectedTitleId\n    useEffect(() => {\n        console.log(\"Current selectedTitleId in TaskManager:\", selectedTitleId);\n        const list = taskLists.find(list => list.id === selectedTitleId);\n        setSelectedList(list);\n    }, [selectedTitleId, taskLists]);\n\n    // Add Task Function\n    const addTask = async (description) => {\n        try {\n            const response = await axios.post(\n                `http://localhost:5000/titles/${selectedTitleId}/tasks`,\n                { description }\n            );\n\n            console.log(\"Full Response Data:\", response.data); // Detailed logging\n\n            // Extract the new task from the response\n            const newTask = response.data.task;\n\n            if (newTask) {\n                console.log(\"New Task Added:\", newTask); // Verify newTask content\n\n                // Update the taskLists in the state\n                setTaskLists((prevLists) =>\n                    prevLists.map((list) =>\n                        list.id === selectedTitleId\n                            ? { ...list, tasks: [...list.tasks, newTask] }\n                            : list\n                    )\n                );\n\n                console.log(\"Task Lists Updated:\", taskLists);\n            } else {\n                console.error(\"Invalid response structure:\", response.data);\n            }\n\n        } catch(error) {\n            console.error(\"Error adding task:\", error);\n        }\n    };\n\n    // Edit Task Function\n    const editTaskHandler = (task) => {\n        setEditTask(task);\n    };\n\n    // Update Task Function\n    const updateTask = async (updatedTask) => {\n        try {\n            const response = await axios.put(\n                `http://localhost:5000/tasks/${updatedTask.id}`,\n                {\n                    description: updatedTask.description,\n                    due_date: updatedTask.due_date,\n                    priority: updatedTask.priority,\n                    completed: updatedTask.completed,\n                }\n            );\n\n            console.log(\"Task Updated:\", response.data); // For debugging\n\n            const updatedTaskData = response.data.task;\n\n            if (updatedTaskData) {\n                // Update the taskLists in the state\n                setTaskLists((prevLists) =>\n                    prevLists.map((list) =>\n                        list.id === selectedTitleId\n                            ? {\n                                  ...list,\n                                  tasks: list.tasks.map((task) =>\n                                      task.id === updatedTaskData.id ? updatedTaskData : task\n                                  ),\n                              }\n                            : list\n                    )\n                );\n\n                // Clear the editTask state\n                setEditTask(null);\n            } else {\n                console.error(\"Updated task data is missing in response:\", response.data);\n            }\n\n        } catch (error) {\n            console.error(\"Error updating task:\", error);\n        }\n    };\n\n    // Toggle Task Completion Function\n    const toggleTask = async (id) => {\n        const task = selectedList.tasks.find((t) => t.id === id);\n        if (!task) {\n            console.error(\"Task not found:\", id);\n            return;\n        }\n\n        try {\n            const response = await axios.put(`http://localhost:5000/tasks/${id}`, {\n                completed: !task.completed, // Toggle the completed status\n            });\n\n            console.log(\"Task Toggled:\", response.data); // For debugging\n\n            const updatedTask = response.data.task;\n\n            if (updatedTask) {\n                // Update the taskLists in the state\n                setTaskLists((prevLists) =>\n                    prevLists.map((list) =>\n                        list.id === selectedTitleId\n                            ? {\n                                  ...list,\n                                  tasks: list.tasks.map((t) =>\n                                      t.id === id ? updatedTask : t\n                                  ),\n                              }\n                            : list\n                    )\n                );\n            } else {\n                console.error(\"Toggled task data is missing in response:\", response.data);\n            }\n\n        } catch (error) {\n            console.error(\"Error toggling task:\", error);\n        }\n    };\n\n    // Delete Task Function\n    const deleteTask = async (taskId) => {\n        try {\n            await axios.delete(`http://localhost:5000/tasks/${taskId}`);\n\n            console.log(`Task with ID ${taskId} deleted successfully.`); // For debugging\n\n            // Update the taskLists in the state by removing the deleted task\n            setTaskLists((prevLists) =>\n                prevLists.map((list) =>\n                    list.id === selectedTitleId\n                        ? { \n                            ...list, \n                            tasks: list.tasks.filter((task) => task.id !== taskId) \n                          }\n                        : list\n                )\n            );\n\n            // If the deleted task was being edited, cancel editing\n            if (editTask && editTask.id === taskId) {\n                setEditTask(null);\n            }\n\n        } catch (error) {\n            console.error(\"Error deleting task:\", error);\n        }\n    };\n\n    // Optional: Log updated taskLists for debugging\n    useEffect(() => {\n        console.log(\"Updated Task Lists:\", taskLists);\n    }, [taskLists]);\n\n    if (!selectedList) return <div>Select a title to manage tasks.</div>;\n\n    return (\n        <div>\n            <h3 style={{ cursor: \"pointer\" }}>\n                {selectedList.title || \"Title not found\"}\n            </h3>\n\n            {!editTask && selectedList && (\n                <TaskForm \n                    onAddTask={(description) => addTask(description)}\n                />\n            )}\n\n            {editTask && (\n                <EditTaskForm\n                    task={editTask}\n                    onSave={updateTask}\n                    onCancel={() => setEditTask(null)}\n                />\n            )}\n\n            <TaskList\n                tasks={selectedList.tasks || []}\n                onEdit={editTaskHandler}\n                onDelete={deleteTask}\n                onToggle={toggleTask}\n            />\n        </div>\n    );\n};\n\nexport default TaskManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}