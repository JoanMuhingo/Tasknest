{"ast":null,"code":"var _jsxFileName = \"/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx\",\n  _s = $RefreshSig$();\n// TaskManager.jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskManager = ({\n  selectedTitleId,\n  taskLists,\n  setTaskLists\n}) => {\n  _s();\n  const [editTask, setEditTask] = useState(null);\n  const [selectedList, setSelectedList] = useState(null);\n\n  // Fetch tasks for the selected title\n  useEffect(() => {\n    const fetchTasks = async () => {\n      if (!selectedTitleId) return; // If no title selected, do nothing\n      try {\n        const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}/tasks`);\n        setSelectedList(response.data); // This should include tasks\n        console.log(\"Fetched Tasks:\", response.data); // Debugging line\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, [selectedTitleId]);\n\n  // Function to add a new task\n  const addTask = async (description, due_date, priority) => {\n    if (!selectedTitleId) {\n      console.error(\"No title selected!\");\n      return; // Exit the function if no title is selected\n    }\n    try {\n      const response = await axios.post(`http://localhost:5000/titles/${selectedTitleId}/tasks`, {\n        description,\n        due_date,\n        priority\n      });\n      if (response.data && response.data.task) {\n        const newTask = response.data.task;\n        console.log(\"New Task Added:\", newTask); // Debugging line\n\n        setSelectedList(prevList => ({\n          ...prevList,\n          tasks: [...prevList.tasks, newTask] // Update the task list\n        }));\n        setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n          ...list,\n          tasks: [...list.tasks, newTask]\n        } : list));\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Function to update a task\n  const updateTask = async updatedTask => {\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${updatedTask.id}`, {\n        description: updatedTask.description,\n        due_date: updatedTask.due_date,\n        priority: updatedTask.priority,\n        completed: updatedTask.completed\n      });\n      console.log(\"Server response:\", response.data);\n\n      // Update the task in the local state\n      setSelectedList(prevList => ({\n        ...prevList,\n        tasks: prevList.tasks.map(task => task.id === updatedTask.id ? response.data.task : task)\n      }));\n      setEditTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Function to toggle task completion\n  const toggleTask = async id => {\n    try {\n      const response = await axios.put(`http://localhost:5000/tasks/${id}/toggle`);\n      if (response.data && response.data.task) {\n        const updatedTask = response.data.task;\n        console.log(\"Task Toggled:\", updatedTask); // Debugging line\n\n        // Update the task in the selectedList\n        setSelectedList(prevList => ({\n          ...prevList,\n          tasks: prevList.tasks ? prevList.tasks.map(task => task.id === id ? updatedTask : task) : [] // Fallback to an empty array if tasks is undefined\n        }));\n\n        // Optionally, update the overall task lists\n        setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n          ...list,\n          tasks: list.tasks ? list.tasks.map(t => t.id === id ? updatedTask : t) : []\n        } : list));\n      } else {\n        console.error(\"Invalid response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error toggling task:\", error);\n    }\n  };\n\n  // Function to delete a task\n  const deleteTask = async taskId => {\n    if (!selectedTitleId) {\n      console.error(\"No title selected!\");\n      return; // Exit if no title is selected\n    }\n    try {\n      await axios.delete(`http://localhost:5000/titles/${selectedTitleId}/tasks/${taskId}`);\n\n      // Update the local state after a successful delete\n      setSelectedList(prevList => ({\n        ...prevList,\n        tasks: prevList.tasks.filter(task => task.id !== taskId) // Remove the deleted task\n      }));\n\n      // Update taskLists if needed\n      setTaskLists(prevLists => prevLists.map(list => list.id === selectedTitleId ? {\n        ...list,\n        tasks: list.tasks.filter(task => task.id !== taskId)\n      } // Filter out the deleted task\n      : list));\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  if (!selectedList) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Select a title to manage tasks.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 31\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: selectedList.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), !editTask && /*#__PURE__*/_jsxDEV(TaskForm, {\n      selectedTitleId: selectedTitleId,\n      onAddTask: addTask // Pass the addTask function\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }, this), editTask && /*#__PURE__*/_jsxDEV(EditTaskForm, {\n      task: editTask,\n      onSave: updateTask,\n      onCancel: () => setEditTask(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: selectedList.tasks // Ensure this is the updated tasks array\n      ,\n      onEdit: setEditTask,\n      onDelete: deleteTask,\n      onToggle: toggleTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskManager, \"M/cvuHPLIBgQ76gQ/ktJ5IIMDTM=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","TaskList","TaskForm","EditTaskForm","jsxDEV","_jsxDEV","TaskManager","selectedTitleId","taskLists","setTaskLists","_s","editTask","setEditTask","selectedList","setSelectedList","fetchTasks","response","get","data","console","log","error","addTask","description","due_date","priority","post","task","newTask","prevList","tasks","prevLists","map","list","id","updateTask","updatedTask","put","completed","toggleTask","t","deleteTask","taskId","delete","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","onAddTask","onSave","onCancel","onEdit","onDelete","onToggle","_c","$RefreshReg$"],"sources":["/home/jojo/Tasknest/front-end/src/components/TaskManager.jsx"],"sourcesContent":["// TaskManager.jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport EditTaskForm from \"./EditTaskForm\";\n\nconst TaskManager = ({ selectedTitleId, taskLists, setTaskLists }) => {\n    const [editTask, setEditTask] = useState(null);\n    const [selectedList, setSelectedList] = useState(null);\n   \n  \n\n    // Fetch tasks for the selected title\n    useEffect(() => {\n        const fetchTasks = async () => {\n            if (!selectedTitleId) return; // If no title selected, do nothing\n            try {\n                const response = await axios.get(`http://localhost:5000/titles/${selectedTitleId}/tasks`);\n                setSelectedList(response.data); // This should include tasks\n                console.log(\"Fetched Tasks:\", response.data); // Debugging line\n            } catch (error) {\n                console.error(\"Error fetching tasks:\", error);\n            }\n        };\n        fetchTasks();\n    }, [selectedTitleId]);\n\n    // Function to add a new task\n    const addTask = async (description, due_date, priority) => {\n      if (!selectedTitleId) {\n          console.error(\"No title selected!\");\n          return; // Exit the function if no title is selected\n      }\n  \n      try {\n          const response = await axios.post(\n              `http://localhost:5000/titles/${selectedTitleId}/tasks`,\n              { description, due_date, priority }\n          );\n  \n          if (response.data && response.data.task) {\n              const newTask = response.data.task;\n              console.log(\"New Task Added:\", newTask); // Debugging line\n  \n              setSelectedList((prevList) => ({\n                  ...prevList,\n                  tasks: [...prevList.tasks, newTask], // Update the task list\n              }));\n  \n              setTaskLists((prevLists) =>\n                  prevLists.map((list) =>\n                      list.id === selectedTitleId\n                          ? { ...list, tasks: [...list.tasks, newTask] }\n                          : list\n                  )\n              );\n          } else {\n              console.error(\"Invalid response structure:\", response.data);\n          }\n      } catch (error) {\n          console.error(\"Error adding task:\", error);\n      }\n  };\n\n    // Function to update a task\n    const updateTask = async (updatedTask) => {\n        try {\n            const response = await axios.put(\n                `http://localhost:5000/tasks/${updatedTask.id}`,\n                {\n                    description: updatedTask.description,\n                    due_date: updatedTask.due_date,\n                    priority: updatedTask.priority,\n                    completed: updatedTask.completed,\n                }\n            );\n            console.log(\"Server response:\", response.data);\n\n            // Update the task in the local state\n            setSelectedList((prevList) => ({\n                ...prevList,\n                tasks: prevList.tasks.map((task) =>\n                    task.id === updatedTask.id ? response.data.task : task\n                ),\n            }));\n            setEditTask(null);\n        } catch (error) {\n            console.error(\"Error updating task:\", error);\n        }\n    };\n\n    // Function to toggle task completion\n    const toggleTask = async (id) => {\n      try {\n          const response = await axios.put(`http://localhost:5000/tasks/${id}/toggle`);\n  \n          if (response.data && response.data.task) {\n              const updatedTask = response.data.task;\n              console.log(\"Task Toggled:\", updatedTask); // Debugging line\n  \n              // Update the task in the selectedList\n              setSelectedList((prevList) => ({\n                  ...prevList,\n                  tasks: prevList.tasks ? prevList.tasks.map((task) =>\n                      task.id === id ? updatedTask : task\n                  ) : [], // Fallback to an empty array if tasks is undefined\n              }));\n  \n              // Optionally, update the overall task lists\n              setTaskLists((prevLists) =>\n                  prevLists.map((list) =>\n                      list.id === selectedTitleId\n                          ? { \n                              ...list, \n                              tasks: list.tasks ? list.tasks.map((t) => (t.id === id ? updatedTask : t)) : [] \n                            }\n                          : list\n                  )\n              );\n          } else {\n              console.error(\"Invalid response structure:\", response.data);\n          }\n  \n      } catch (error) {\n          console.error(\"Error toggling task:\", error);\n      }\n  };\n  \n    // Function to delete a task\n    const deleteTask = async (taskId) => {\n      if (!selectedTitleId) {\n          console.error(\"No title selected!\");\n          return; // Exit if no title is selected\n      }\n  \n      try {\n          await axios.delete(`http://localhost:5000/titles/${selectedTitleId}/tasks/${taskId}`);\n  \n          // Update the local state after a successful delete\n          setSelectedList((prevList) => ({\n              ...prevList,\n              tasks: prevList.tasks.filter((task) => task.id !== taskId), // Remove the deleted task\n          }));\n  \n          // Update taskLists if needed\n          setTaskLists((prevLists) =>\n              prevLists.map((list) =>\n                  list.id === selectedTitleId\n                      ? { ...list, tasks: list.tasks.filter((task) => task.id !== taskId) } // Filter out the deleted task\n                      : list\n              )\n          );\n  \n      } catch (error) {\n          console.error(\"Error deleting task:\", error);\n      }\n  };\n  \n\n    if (!selectedList) return <div>Select a title to manage tasks.</div>;\n\n    return (\n        <div className=\"task-manager\">\n            <h3>{selectedList.title}</h3>\n\n            {!editTask && (\n                <TaskForm \n                    selectedTitleId={selectedTitleId}\n                    onAddTask={addTask} // Pass the addTask function\n                />\n            )}\n\n            {editTask && (\n                <EditTaskForm\n                    task={editTask}\n                    onSave={updateTask}\n                    onCancel={() => setEditTask(null)}\n                />\n            )}\n\n            <TaskList\n                tasks={selectedList.tasks} // Ensure this is the updated tasks array\n                onEdit={setEditTask}\n                onDelete={deleteTask}\n                onToggle={toggleTask}\n            />\n        </div>\n    );\n};\n\nexport default TaskManager;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,GAAGA,CAAC;EAAEC,eAAe;EAAEC,SAAS;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAItD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMgB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI,CAACR,eAAe,EAAE,OAAO,CAAC;MAC9B,IAAI;QACA,MAAMS,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,gCAAgCV,eAAe,QAAQ,CAAC;QACzFO,eAAe,CAACE,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;QAChCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACJ,CAAC;IACDN,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACR,eAAe,CAAC,CAAC;;EAErB;EACA,MAAMe,OAAO,GAAG,MAAAA,CAAOC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IACzD,IAAI,CAAClB,eAAe,EAAE;MAClBY,OAAO,CAACE,KAAK,CAAC,oBAAoB,CAAC;MACnC,OAAO,CAAC;IACZ;IAEA,IAAI;MACA,MAAML,QAAQ,GAAG,MAAMhB,KAAK,CAAC0B,IAAI,CAC7B,gCAAgCnB,eAAe,QAAQ,EACvD;QAAEgB,WAAW;QAAEC,QAAQ;QAAEC;MAAS,CACtC,CAAC;MAED,IAAIT,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACS,IAAI,EAAE;QACrC,MAAMC,OAAO,GAAGZ,QAAQ,CAACE,IAAI,CAACS,IAAI;QAClCR,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEQ,OAAO,CAAC,CAAC,CAAC;;QAEzCd,eAAe,CAAEe,QAAQ,KAAM;UAC3B,GAAGA,QAAQ;UACXC,KAAK,EAAE,CAAC,GAAGD,QAAQ,CAACC,KAAK,EAAEF,OAAO,CAAC,CAAE;QACzC,CAAC,CAAC,CAAC;QAEHnB,YAAY,CAAEsB,SAAS,IACnBA,SAAS,CAACC,GAAG,CAAEC,IAAI,IACfA,IAAI,CAACC,EAAE,KAAK3B,eAAe,GACrB;UAAE,GAAG0B,IAAI;UAAEH,KAAK,EAAE,CAAC,GAAGG,IAAI,CAACH,KAAK,EAAEF,OAAO;QAAE,CAAC,GAC5CK,IACV,CACJ,CAAC;MACL,CAAC,MAAM;QACHd,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEL,QAAQ,CAACE,IAAI,CAAC;MAC/D;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC9C;EACJ,CAAC;;EAEC;EACA,MAAMc,UAAU,GAAG,MAAOC,WAAW,IAAK;IACtC,IAAI;MACA,MAAMpB,QAAQ,GAAG,MAAMhB,KAAK,CAACqC,GAAG,CAC5B,+BAA+BD,WAAW,CAACF,EAAE,EAAE,EAC/C;QACIX,WAAW,EAAEa,WAAW,CAACb,WAAW;QACpCC,QAAQ,EAAEY,WAAW,CAACZ,QAAQ;QAC9BC,QAAQ,EAAEW,WAAW,CAACX,QAAQ;QAC9Ba,SAAS,EAAEF,WAAW,CAACE;MAC3B,CACJ,CAAC;MACDnB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEJ,QAAQ,CAACE,IAAI,CAAC;;MAE9C;MACAJ,eAAe,CAAEe,QAAQ,KAAM;QAC3B,GAAGA,QAAQ;QACXC,KAAK,EAAED,QAAQ,CAACC,KAAK,CAACE,GAAG,CAAEL,IAAI,IAC3BA,IAAI,CAACO,EAAE,KAAKE,WAAW,CAACF,EAAE,GAAGlB,QAAQ,CAACE,IAAI,CAACS,IAAI,GAAGA,IACtD;MACJ,CAAC,CAAC,CAAC;MACHf,WAAW,CAAC,IAAI,CAAC;IACrB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;;EAED;EACA,MAAMkB,UAAU,GAAG,MAAOL,EAAE,IAAK;IAC/B,IAAI;MACA,MAAMlB,QAAQ,GAAG,MAAMhB,KAAK,CAACqC,GAAG,CAAC,+BAA+BH,EAAE,SAAS,CAAC;MAE5E,IAAIlB,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACS,IAAI,EAAE;QACrC,MAAMS,WAAW,GAAGpB,QAAQ,CAACE,IAAI,CAACS,IAAI;QACtCR,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEgB,WAAW,CAAC,CAAC,CAAC;;QAE3C;QACAtB,eAAe,CAAEe,QAAQ,KAAM;UAC3B,GAAGA,QAAQ;UACXC,KAAK,EAAED,QAAQ,CAACC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAACE,GAAG,CAAEL,IAAI,IAC5CA,IAAI,CAACO,EAAE,KAAKA,EAAE,GAAGE,WAAW,GAAGT,IACnC,CAAC,GAAG,EAAE,CAAE;QACZ,CAAC,CAAC,CAAC;;QAEH;QACAlB,YAAY,CAAEsB,SAAS,IACnBA,SAAS,CAACC,GAAG,CAAEC,IAAI,IACfA,IAAI,CAACC,EAAE,KAAK3B,eAAe,GACrB;UACE,GAAG0B,IAAI;UACPH,KAAK,EAAEG,IAAI,CAACH,KAAK,GAAGG,IAAI,CAACH,KAAK,CAACE,GAAG,CAAEQ,CAAC,IAAMA,CAAC,CAACN,EAAE,KAAKA,EAAE,GAAGE,WAAW,GAAGI,CAAE,CAAC,GAAG;QAC/E,CAAC,GACDP,IACV,CACJ,CAAC;MACL,CAAC,MAAM;QACHd,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEL,QAAQ,CAACE,IAAI,CAAC;MAC/D;IAEJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;;EAEC;EACA,MAAMoB,UAAU,GAAG,MAAOC,MAAM,IAAK;IACnC,IAAI,CAACnC,eAAe,EAAE;MAClBY,OAAO,CAACE,KAAK,CAAC,oBAAoB,CAAC;MACnC,OAAO,CAAC;IACZ;IAEA,IAAI;MACA,MAAMrB,KAAK,CAAC2C,MAAM,CAAC,gCAAgCpC,eAAe,UAAUmC,MAAM,EAAE,CAAC;;MAErF;MACA5B,eAAe,CAAEe,QAAQ,KAAM;QAC3B,GAAGA,QAAQ;QACXC,KAAK,EAAED,QAAQ,CAACC,KAAK,CAACc,MAAM,CAAEjB,IAAI,IAAKA,IAAI,CAACO,EAAE,KAAKQ,MAAM,CAAC,CAAE;MAChE,CAAC,CAAC,CAAC;;MAEH;MACAjC,YAAY,CAAEsB,SAAS,IACnBA,SAAS,CAACC,GAAG,CAAEC,IAAI,IACfA,IAAI,CAACC,EAAE,KAAK3B,eAAe,GACrB;QAAE,GAAG0B,IAAI;QAAEH,KAAK,EAAEG,IAAI,CAACH,KAAK,CAACc,MAAM,CAAEjB,IAAI,IAAKA,IAAI,CAACO,EAAE,KAAKQ,MAAM;MAAE,CAAC,CAAC;MAAA,EACpET,IACV,CACJ,CAAC;IAEL,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAGC,IAAI,CAACR,YAAY,EAAE,oBAAOR,OAAA;IAAAwC,QAAA,EAAK;EAA+B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEpE,oBACI5C,OAAA;IAAK6C,SAAS,EAAC,cAAc;IAAAL,QAAA,gBACzBxC,OAAA;MAAAwC,QAAA,EAAKhC,YAAY,CAACsC;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE5B,CAACtC,QAAQ,iBACNN,OAAA,CAACH,QAAQ;MACLK,eAAe,EAAEA,eAAgB;MACjC6C,SAAS,EAAE9B,OAAQ,CAAC;IAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CACJ,EAEAtC,QAAQ,iBACLN,OAAA,CAACF,YAAY;MACTwB,IAAI,EAAEhB,QAAS;MACf0C,MAAM,EAAElB,UAAW;MACnBmB,QAAQ,EAAEA,CAAA,KAAM1C,WAAW,CAAC,IAAI;IAAE;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CACJ,eAED5C,OAAA,CAACJ,QAAQ;MACL6B,KAAK,EAAEjB,YAAY,CAACiB,KAAM,CAAC;MAAA;MAC3ByB,MAAM,EAAE3C,WAAY;MACpB4C,QAAQ,EAAEf,UAAW;MACrBgB,QAAQ,EAAElB;IAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACvC,EAAA,CAtLIJ,WAAW;AAAAoD,EAAA,GAAXpD,WAAW;AAwLjB,eAAeA,WAAW;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}